<?php

/**
 * @file
 * The media_ustream/media_ustream.module file.
 *
 * Media: UStream provides a stream wrapper and formatters for
 * videos provided by UStream, available at http://ustream.tv/.
 *
 * @TODO:
 * Tie in UStream API even more.
 * Allow editors to put in a ustream username to display on the browser.
 * Allow editors to log in w/ their credentials.
 */

// A registry of variable_get defaults.
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'media_ustream') . '/includes/media_ustream.variables.inc';

// Hooks and callbacks for integrating
// with File Entity module for display.
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'media_ustream') . '/includes/media_ustream.formatters.inc';

/**
 * Implements hook_media_internet_providers().
 */
function media_ustream_media_internet_providers() {
  $info['MediaInternetUStreamHandler'] = array(
    'title' => t('UStream'),
    'image' => drupal_get_path('module', 'media_ustream') . '/images/ustream_logo.png',
  );

  return $info;
}

/**
 * Implements hook_stream_wrappers().
 */
function media_ustream_stream_wrappers() {
  return array(
    'ustream' => array(
      'name' => t('UStream videos'),
      'class' => 'MediaUStreamStreamWrapper',
      'description' => t('Videos provided by UStream.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function media_ustream_theme($existing, $type, $theme, $path) {
  return array(
    'media_ustream_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'media_ustream.theme.inc',
      'path' => $path . '/includes/themes',
      'template' => 'media-ustream-video',
    ),
  );
}

/**
 * Implements hook_media_parse().
 *
 * @todo This hook should be deprecated. Refactor Media module to not call it
 *   any more, since media_internet should be able to automatically route to the
 *   appropriate handler.
 */
function media_ustream_media_parse($embed_code) {
  $handler = new MediaInternetUStreamHandler($embed_code);
  return $handler->parse($embed_code);
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Regster the video/youtube mimetype.
 */
function media_ustream_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/ustream';
}

/**
 * Implements hook_file_default_types_alter().
 *
 * Adds the video/youtube fake mimetype to video files.
 */
function media_ustream_file_default_types_alter(&$types) {
  $types['video']->mimetypes[] = 'video/ustream';
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_ustream_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function media_ustream_media_browser_plugin_info() {
  $info['ustream'] = array(
    'title' => t('UStream'),
    'class' => 'MediaUStreamBrowser',
  );

  return $info;
}

/**
 * Test a media file via the $vid.
 */
function media_ustream_test_media_id($vid) {
  $handler = new MediaInternetUStreamHandler($vid);
  return $handler->getVideoProperties($vid);
}

/**
 * Test a media file via the $vid.
 */
function media_ustream_test_channel_id($cid) {
  $handler = new MediaInternetUStreamHandler($cid);
  return $handler->getChannelProperties($cid);
}
